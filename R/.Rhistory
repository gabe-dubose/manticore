tree.size <- tree.size,
replicate <- i,
iterations <- iteration,
metric <- metric,
p <- rtc.result$p
)
}
}
}
}
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
# tree.sizes <- c(5, 20, 40, 60, 80, 100)
tree.sizes <- c(5, 20)
# define iterations
#iterations <- c(10^2, 10^3, 10^4, 10^5)
iterations <- c(10^2, 10^3)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI')
# iterate through tree sizes
for (tree.size in tree.sizes) {
# replicates
for (i in 1:10){
#simulate trees
tree1 <- ape::rtopology(tree.size, rooted=FALSE)
tree2 <- ape::rtopology(tree.size, rooted=FALSE)
#run rtc test with each iteration and metric
for (iteration in iterations){
for (metric in metrics) {
# run rtc test
rtc.result <- manticore::rtc.test(tree1, tree2, metric, iteration)
#assemble results
entry <- data.frame(
tree.size <- tree.size,
replicate <- i,
iterations <- iteration,
metric <- metric,
p <- rtc.result$p
)
}
}
}
}
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
# tree.sizes <- c(5, 20, 40, 60, 80, 100)
tree.sizes <- c(5, 20)
# define iterations
#iterations <- c(10^2, 10^3, 10^4, 10^5)
iterations <- c(10^2, 10^3)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI')
# iterate through tree sizes
for (tree.size in tree.sizes) {
# replicates
for (i in 1:10){
#simulate trees
tree1 <- tostring(ape::rtopology(tree.size, rooted=FALSE))
tree2 <- tostring(ape::rtopology(tree.size, rooted=FALSE))
#run rtc test with each iteration and metric
for (iteration in iterations){
for (metric in metrics) {
# run rtc test
rtc.result <- manticore::rtc.test(tree1, tree2, metric, iteration)
#assemble results
entry <- data.frame(
tree.size <- tree.size,
replicate <- i,
iterations <- iteration,
metric <- metric,
p <- rtc.result$p
)
}
}
}
}
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
# tree.sizes <- c(5, 20, 40, 60, 80, 100)
tree.sizes <- c(5, 20)
# define iterations
#iterations <- c(10^2, 10^3, 10^4, 10^5)
iterations <- c(10^2, 10^3)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI')
# iterate through tree sizes
for (tree.size in tree.sizes) {
# replicates
for (i in 1:10){
#simulate trees
tree1 <- toString(ape::rtopology(tree.size, rooted=FALSE))
tree2 <- toString(ape::rtopology(tree.size, rooted=FALSE))
#run rtc test with each iteration and metric
for (iteration in iterations){
for (metric in metrics) {
# run rtc test
rtc.result <- manticore::rtc.test(tree1, tree2, metric, iteration)
#assemble results
entry <- data.frame(
tree.size <- tree.size,
replicate <- i,
iterations <- iteration,
metric <- metric,
p <- rtc.result$p
)
}
}
}
}
ape::rtopology(tree.size, rooted=FALSE)
test <- ape::rtopology(tree.size, rooted=FALSE)
View(test)
write.tree(test)
ape::write.tree(test)
cat(ape::write.tree(test), "\n")
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
# tree.sizes <- c(5, 20, 40, 60, 80, 100)
tree.sizes <- c(5, 20)
# define iterations
#iterations <- c(10^2, 10^3, 10^4, 10^5)
iterations <- c(10^2, 10^3)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI')
# iterate through tree sizes
for (tree.size in tree.sizes) {
# replicates
for (i in 1:10){
#simulate trees
tree1 <- cat(ape::write.tree(ape::rtopology(tree.size, rooted=FALSE)), "\n")
tree2 <- cat(ape::write.tree(ape::rtopology(tree.size, rooted=FALSE)), "\n")
#run rtc test with each iteration and metric
for (iteration in iterations){
for (metric in metrics) {
# run rtc test
rtc.result <- manticore::rtc.test(tree1, tree2, metric, iteration)
#assemble results
entry <- data.frame(
tree.size <- tree.size,
replicate <- i,
iterations <- iteration,
metric <- metric,
p <- rtc.result$p
)
}
}
}
}
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
# tree.sizes <- c(5, 20, 40, 60, 80, 100)
tree.sizes <- c(5, 20)
# define iterations
#iterations <- c(10^2, 10^3, 10^4, 10^5)
iterations <- c(10^2, 10^3)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI')
# iterate through tree sizes
for (tree.size in tree.sizes) {
# replicates
for (i in 1:10){
#simulate trees
tree1 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
#run rtc test with each iteration and metric
for (iteration in iterations){
for (metric in metrics) {
# run rtc test
rtc.result <- manticore::rtc.test(tree1, tree2, metric, iteration)
#assemble results
entry <- data.frame(
tree.size <- tree.size,
replicate <- i,
iterations <- iteration,
metric <- metric,
p <- rtc.result$p
)
}
}
}
}
View(entry)
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
# tree.sizes <- c(5, 20, 40, 60, 80, 100)
tree.sizes <- c(5, 20)
# define iterations
#iterations <- c(10^2, 10^3, 10^4, 10^5)
iterations <- c(10^2, 10^3)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI')
# iterate through tree sizes
for (tree.size in tree.sizes) {
# replicates
for (i in 1:10){
#simulate trees
tree1 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
#run rtc test with each iteration and metric
for (iteration in iterations){
for (metric in metrics) {
# run rtc test
rtc.result <- manticore::rtc.test(tree1, tree2, metric, iteration)
#assemble results
entry <- data.frame(
tree.size <- tree.size,
replicate <- i,
iterations <- iteration,
metric <- metric,
p <- rtc.result$p
)
#add to results
data <- rbind(data, entry)
}
}
}
}
View(data)
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
# tree.sizes <- c(5, 20, 40, 60, 80, 100)
tree.sizes <- c(5, 20)
# define iterations
#iterations <- c(10^2, 10^3, 10^4, 10^5)
iterations <- c(10^2, 10^3)
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
# tree.sizes <- c(5, 20, 40, 60, 80, 100)
tree.sizes <- c(5, 20)
# define iterations
#iterations <- c(10^2, 10^3, 10^4, 10^5)
iterations <- c(10^2, 10^3)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI')
# iterate through tree sizes
for (tree.size in tree.sizes) {
# replicates
for (i in 1:10){
#simulate trees
tree1 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
#run rtc test with each iteration and metric
for (metric in metrics) {
for (iteration in iterations){
print(paste("Working on", metric, "with", iteration, "iterations."))
# run rtc test
rtc.result <- manticore::rtc.test(tree1, tree2, metric, iteration)
#assemble results
entry <- data.frame(
tree.size <- tree.size,
replicate <- i,
iterations <- iteration,
metric <- metric,
p <- rtc.result$p
)
#add to results
data <- rbind(data, entry)
}
}
}
}
View(data)
View(data)
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
# tree.sizes <- c(5, 20, 40, 60, 80, 100)
tree.sizes <- c(5, 20)
# define iterations
#iterations <- c(10^2, 10^3, 10^4, 10^5)
iterations <- c(10^2, 10^3)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI')
# iterate through tree sizes
for (tree.size in tree.sizes) {
# replicates
for (i in 1:10){
#simulate trees
tree1 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
#run rtc test with each iteration and metric
for (metric in metrics) {
for (iteration in iterations){
print(paste("Working on", metric, "with", iteration, "iterations."))
# run rtc test
rtc.result <- manticore::rtc.test(tree1, tree2, metric, iteration)
#assemble results
entry <- data.frame(
tree.size = tree.size,
replicate = i,
iterations = iteration,
metric = metric,
p = rtc.result$p
)
#add to results
data <- rbind(data, entry)
}
}
}
}
View(data)
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
tree.sizes <- c(5, 20, 40, 60, 80, 100)
# define iterations
iterations <- c(10^2, 10^3, 10^4, 10^5)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI',
'MPI', 'NS', 'MSD', 'MSID')
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
tree.sizes <- c(5, 20, 40, 60, 80, 100)
# define iterations
iterations <- c(10^2, 10^3, 10^4, 10^5)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI',
'MPI', 'NS', 'MSD', 'MSID')
# iterate through tree sizes
for (tree.size in tree.sizes) {
# replicates
for (i in 1:10){
#simulate trees
tree1 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
#run rtc test with each iteration and metric
for (metric in metrics) {
for (iteration in iterations){
print(paste("Working on tree size", tree.size, "with", metric, "and", iteration, "iterations."))
# run rtc test
rtc.result <- manticore::rtc.test(tree1, tree2, metric, iteration)
#assemble results
entry <- data.frame(
tree.size = tree.size,
replicate = i,
iterations = iteration,
metric = metric,
p = rtc.result$p
)
#add to results
data <- rbind(data, entry)
}
}
}
}
View(data)
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
tree.sizes <- c(5, 20, 40, 60, 80, 100)
# define iterations
iterations <- c(10^1, 10^2, 10^3, 10^4)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI',
'MPI', 'NS', 'MSD', 'MSID')
# iterate through tree sizes
for (tree.size in tree.sizes) {
# replicates
for (i in 1:10){
#simulate trees
tree1 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
#run rtc test with each iteration and metric
for (metric in metrics) {
for (iteration in iterations){
print(paste("Working on tree size", tree.size, "with", metric, "and", iteration, "iterations."))
# run rtc test
rtc.result <- manticore::rtc.test(tree1, tree2, metric, iteration)
#assemble results
entry <- data.frame(
tree.size = tree.size,
replicate = i,
iterations = iteration,
metric = metric,
p = rtc.result$p
)
#add to results
data <- rbind(data, entry)
}
}
}
}
# initialize data storage
data <- data.frame(
tree.size = integer(),
replicate = integer(),
iterations = integer(),
metric = character(),
p = numeric()
)
# define tree sizes
tree.sizes <- c(5, 20, 40, 60, 80, 100)
# define iterations
iterations <- c(10^1, 10^2, 10^3, 10^4)
# define metrics
metrics <- c('RF', 'ICRF', 'JRF', 'MCI',
'MPI', 'NS', 'MSD', 'MSID')
# iterate through tree sizes
for (tree.size in tree.sizes) {
# replicates
for (i in 1:10){
#simulate trees
tree1 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
#run rtc test with each iteration and metric
for (metric in metrics) {
for (iteration in iterations){
print(paste("Working on tree size", tree.size, "with", metric, "and", iteration, "iterations."))
# run rtc test
rtc.result <- manticore::rtc.test(tree1, tree2, metric, iteration)
#assemble results
entry <- data.frame(
tree.size = tree.size,
replicate = i,
iterations = iteration,
metric = metric,
p = rtc.result$p
)
#add to results
data <- rbind(data, entry)
}
}
}
}
write.csv(data, "p_var_data.csv")
View(data)
min(data$p)
quantile(data$p)
?quantile
quantile(data$p, probs=c(0.05))
quantile(data$p, probs=c(0.1))
