test.tree1 <- ''
test.tree2 <- ''
for (i in 1:100000) {
# simulate two trees
tree1 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(tree.size, rooted=FALSE))
rtc.result <- manticore::rtc.test(tree1, tree2, 'MCI+n',
iterations=1000, verbose=FALSE)
print(paste(rtc.result$p, rtc.result$observed.congruence))
if (rtc.result$p < 0.05 && rtc.result$observed.congruence > 0.8){
test.tree1 <- tree1
test.tree2 <- tree2
break
}
}
test.tree1 <- ''
test.tree2 <- ''
for (i in 1:100000) {
# simulate two trees
tree1 <- ape::write.tree(ape::rtopology(10, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(10, rooted=FALSE))
rtc.result <- manticore::rtc.test(tree1, tree2, 'MCI+n',
iterations=1000, verbose=FALSE)
print(paste(rtc.result$p, rtc.result$observed.congruence))
if (rtc.result$p < 0.05 && rtc.result$observed.congruence > 0.8){
test.tree1 <- tree1
test.tree2 <- tree2
break
}
}
test.tree1 <- ''
test.tree2 <- ''
for (i in 1:100000) {
# simulate two trees
tree1 <- ape::write.tree(ape::rtopology(10, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(10, rooted=FALSE))
rtc.result <- manticore::rtc.test(tree1, tree2, 'MCI+n',
iterations=1000, verbose=FALSE)
print(paste(rtc.result$p, rtc.result$observed.congruence))
if (rtc.result$p < 0.04){
test.tree1 <- tree1
test.tree2 <- tree2
break
}
}
test.tree1 <- ''
test.tree2 <- ''
for (i in 1:100000) {
# simulate two trees
tree1 <- ape::write.tree(ape::rtopology(10, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(10, rooted=FALSE))
rtc.result <- manticore::rtc.test(tree1, tree2, 'MCI',
iterations=1000, verbose=FALSE)
print(paste(rtc.result$p, rtc.result$observed.congruence))
if (rtc.result$p < 0.04){
test.tree1 <- tree1
test.tree2 <- tree2
break
}
}
rtc.result$p
rtc.result$observed.congruence
cophylo.tree <- phytools::cophylo(phylo.tree1, phylo.tree2, rotate=TRUE)
cophylo.tree <- phytools::cophylo(tree1, tree2, rotate=TRUE)
# read trees as phylo objects
phylo.tree1 <- ape::as.phylo(ape::read.tree(text=tree1))
phylo.tree2 <- ape::as.phylo(ape::read.tree(text=tree2))
# create cophylo object
cophylo.tree <- phytools::cophylo(phylo.tree1, phylo.tree2, rotate=TRUE)
plot(cophylo.tree)
test.tree1 <- ''
test.tree2 <- ''
for (i in 1:100000) {
# simulate two trees
tree1 <- ape::write.tree(ape::rtopology(10, rooted=FALSE))
tree2 <- ape::write.tree(ape::rtopology(10, rooted=FALSE))
rtc.result <- manticore::rtc.test(tree1, tree2, 'MCI',
iterations=1000, verbose=FALSE)
print(paste(rtc.result$p, rtc.result$observed.congruence))
if (rtc.result$p < 0.04){
test.tree1 <- tree1
test.tree2 <- tree2
break
}
}
# read trees as phylo objects
phylo.tree1 <- ape::as.phylo(ape::read.tree(text=tree1))
phylo.tree2 <- ape::as.phylo(ape::read.tree(text=tree2))
# create cophylo object
cophylo.tree <- phytools::cophylo(phylo.tree1, phylo.tree2, rotate=TRUE)
plot(cophylo.tree)
phylo.tree1
tree1
tree2
tree1 <- "(t5:0.6030125057,(t6:0.9897625113,(((t7:0.9443907421,t9:0.5512045701):0.178062907,(t4:0.5385736986,(t8:0.8108982465,t2:0.6424617139):0.7985284778):0.05077014188):0.7699153256,t3:0.257833373):0.9529942176):0.598905632,(t1:0.08370447881,t10:0.3042376931):0.4075395141);"
tree2 <- "(t5:0.8807457979,t10:0.2588515345,(t1:0.5110714179,((t6:0.7630252142,(t4:0.4388972835,((t2:0.7929537457,(t3:0.1264250765,t8:0.6562405329):0.09945738246):0.221811289,t7:0.3562049884):0.977532794):0.02143185376):0.4469005479,t9:0.4462291533):0.7385474753):0.245398188);"
rtc.result <- manticore::rtc.test(tree1, tree2, 'MSID',
iterations=1000, verbose=FALSE)
rtc.result$p
rtc.result <- manticore::rtc.test(tree1, tree2, 'MSID',
iterations=1000, verbose=FALSE)
rtc.result$p
tree1 <- "(t5:0.6030125057,(t6:0.9897625113,(((t7:0.9443907421,t9:0.5512045701):0.178062907,(t4:0.5385736986,(t8:0.8108982465,t2:0.6424617139):0.7985284778):0.05077014188):0.7699153256,t3:0.257833373):0.9529942176):0.598905632,(t1:0.08370447881,t10:0.3042376931):0.4075395141);"
tree2 <- "(t5:0.8807457979,t10:0.2588515345,(t1:0.5110714179,((t6:0.7630252142,(t4:0.4388972835,((t2:0.7929537457,(t3:0.1264250765,t8:0.6562405329):0.09945738246):0.221811289,t7:0.3562049884):0.977532794):0.02143185376):0.4469005479,t9:0.4462291533):0.7385474753):0.245398188);"
rtc.result <- manticore::rtc.test(tree1, tree2, 'MSID',
iterations=1000, verbose=FALSE)
rtc.result <- manticore::rtc.test(tree1, tree2, 'MCI',
iterations=1000, verbose=FALSE)
rtc.result$p
rtc.result$observed.congruence
tree1 <- "(t5:0.6030125057,(t6:0.9897625113,(((t7:0.9443907421,t9:0.5512045701):0.178062907,(t4:0.5385736986,(t8:0.8108982465,t2:0.6424617139):0.7985284778):0.05077014188):0.7699153256,t3:0.257833373):0.9529942176):0.598905632,(t1:0.08370447881,t10:0.3042376931):0.4075395141);"
tree2 <- "(t5:0.8807457979,t10:0.2588515345,(t1:0.5110714179,((t6:0.7630252142,(t4:0.4388972835,((t2:0.7929537457,(t3:0.1264250765,t8:0.6562405329):0.09945738246):0.221811289,t7:0.3562049884):0.977532794):0.02143185376):0.4469005479,t9:0.4462291533):0.7385474753):0.245398188);"
# read trees as phylo objects
phylo.tree1 <- ape::as.phylo(ape::read.tree(text=tree1))
phylo.tree2 <- ape::as.phylo(ape::read.tree(text=tree2))
# create cophylo object
cophylo.tree <- phytools::cophylo(phylo.tree1, phylo.tree2, rotate=TRUE)
plot(cophylo.tree)
plot(cophylo.tree, link.type="curved",link.lwd=3)
plot(cophylo.tree, link.type="curved",link.lwd=3, link.lty="solid")
plot(cophylo.tree, link.type="curved",link.lwd=2, link.lty="solid")
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",link.lwd=2, link.lty="solid")
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",link.lwd=2, link.lty="solid")
tree1 <- "(E:0.6030125057,(F:0.9897625113,(((G:0.9443907421,I:0.5512045701):0.178062907,(D:0.5385736986,(H:0.8108982465,B:0.6424617139):0.7985284778):0.05077014188):0.7699153256,C:0.257833373):0.9529942176):0.598905632,(A:0.08370447881,J:0.3042376931):0.4075395141);"
tree2 <- "(E:0.8807457979,J:0.2588515345,(A:0.5110714179,((F:0.7630252142,(D:0.4388972835,((B:0.7929537457,(C:0.1264250765,H:0.6562405329):0.09945738246):0.221811289,G:0.3562049884):0.977532794):0.02143185376):0.4469005479,I:0.4462291533):0.7385474753):0.245398188);"
# read trees as phylo objects
phylo.tree1 <- ape::as.phylo(ape::read.tree(text=tree1))
phylo.tree2 <- ape::as.phylo(ape::read.tree(text=tree2))
# create cophylo object
cophylo.tree <- phytools::cophylo(phylo.tree1, phylo.tree2, rotate=TRUE)
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",link.lwd=2, link.lty="solid")
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col=make.transparent('red', 1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col=ape::make.transparent('red', 1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col=phytools::make.transparent('red', 1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col=phytools::make.transparent('red', 2))
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col=phytools::make.transparent('red', 2))
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col=phytools::make.transparent('red', 1))
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
rtc.result <- manticore::rtc.test(tree1, tree2, 'MCI',
iterations=1000, verbose=FALSE)
rtc.result$p
rtc.result$observed.congruence
rtc.result$null.congruence.model
par(mfrow=c(1,2))
density(rtc.result$null.congruence.model)
hist(rtc.result$null.congruence.model)
hist(rtc.result$null.congruence.model)
par(mfrow=c(1,2))
hist(rtc.result$null.congruence.model)
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
par(mfrow=c(1,2), mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model)
?hist
par(mfrow=c(1,2), mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=TRUE)
?hist
par(mfrow=c(1,2), mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
density=TRUE)
?hist
par(mfrow=c(1,2), mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE)
rtc.result$p
rtc.result$observed.congruence
abline(v=rtc.result$observed.congruence)
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
par(mfrow=c(1,2), mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE)
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(2,3))  # Histogram gets 2 parts, cophylo gets 3
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE)
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(2,3))  # Histogram gets 2 parts, cophylo gets 3
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE)
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mar=c(1,1,1,1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(2,3))  # Histogram gets 2 parts, cophylo gets 3
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE)
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mar=c(2,1,1,1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(2,3))  # Histogram gets 2 parts, cophylo gets 3
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE)
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mar=c(10,10,10,10))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(2,3))  # Histogram gets 2 parts, cophylo gets 3
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE)
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mar=c(1,1,1,1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
hist(rtc.result$null.congruence.model,
freq=FALSE)
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
layout(matrix(c(1,2), nrow=1), widths=c(2,2))  # Histogram gets 2 parts, cophylo gets 3
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE)
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mar=c(1,1,1,1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(2,2))  # Histogram gets 2 parts, cophylo gets 3
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE)
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mar=c(5,4,2,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(2,2))  # Histogram gets 2 parts, cophylo gets 3
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE,
title='')
?hist
layout(matrix(c(1,2), nrow=1), widths=c(2,2))  # Histogram gets 2 parts, cophylo gets 3
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='')
layout(matrix(c(1,2), nrow=1), widths=c(2,2))  # Histogram gets 2 parts, cophylo gets 3
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mar=c(5,4,2,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(2,2))  # Histogram gets 2 parts, cophylo gets 3
par(mar=c(5,4,2,1))
par(mar=c(5,4,2,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(2,2))
par(mar=c(5,4,2,1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(2,2))
par(mar=c(5,4,2,1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mar=c(5,4,2,1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
par(mar=c(1,1,1,1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
par(mar=c(1,1,1,1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(2,2))
par(mar=c(1,1,1,1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
layout(matrix(c(1,2), nrow=1), widths=c(3,2))
par(mar=c(1,1,1,1))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='gray')
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='red')
par(mar=c(5,4,2,1))
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='red')
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='red')
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='red')
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='red')
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='red')
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
#' Visualize Random Tree Congruence Test Results
#' @param reference.tree Path to reference tree file, or string in Newick format
#' @param comparison.tree Path to comparison tree file, or string in Newick format
#' @param rtc.test.out Output object from the rtc.test function
#' @export
visualize.rtc <- function(reference.tree, comparison.tree, rtc.test.out){
# read trees as phylo objects
phylo.tree1 <- ape::as.phylo(ape::read.tree(text=reference.tree))
phylo.tree2 <- ape::as.phylo(ape::read.tree(text=comparison.tree))
# create cophylo object
cophylo.tree <- phytools::cophylo(phylo.tree1, phylo.tree2, rotate=TRUE)
#plot
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='black')
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='black', lwd=2, lty=2)
}
visualize.rtc(tree1, tree2, rtc.result)
visualize.rtc(tree1, tree2, rtc.result)
#' Visualize Random Tree Congruence Test Results
#' @param reference.tree Path to reference tree file, or string in Newick format
#' @param comparison.tree Path to comparison tree file, or string in Newick format
#' @param rtc.test.out Output object from the rtc.test function
#' @export
visualize.rtc <- function(reference.tree, comparison.tree, rtc.test.out){
# read trees as phylo objects
phylo.tree1 <- ape::as.phylo(ape::read.tree(text=reference.tree))
phylo.tree2 <- ape::as.phylo(ape::read.tree(text=comparison.tree))
# create cophylo object
cophylo.tree <- phytools::cophylo(phylo.tree1, phylo.tree2, rotate=TRUE)
#plot
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='black')
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='black', lwd=2, lty=2)
}
visualize.rtc(tree1, tree2, rtc.result)
#' Visualize Random Tree Congruence Test Results
#' @param reference.tree Path to reference tree file, or string in Newick format
#' @param comparison.tree Path to comparison tree file, or string in Newick format
#' @param rtc.test.out Output object from the rtc.test function
#' @export
visualize.rtc <- function(reference.tree, comparison.tree, rtc.test.out){
# read trees as phylo objects
phylo.tree1 <- ape::as.phylo(ape::read.tree(text=reference.tree))
phylo.tree2 <- ape::as.phylo(ape::read.tree(text=comparison.tree))
# create cophylo object
cophylo.tree <- phytools::cophylo(phylo.tree1, phylo.tree2, rotate=TRUE)
#plot
par(mfrow=c(1,2))
plot(cophylo.tree, link.type="curved",
link.lwd=2, link.lty="solid",
link.col='black')
par(mar=c(5,4,2,1))
hist(rtc.result$null.congruence.model,
freq=FALSE,
main='', xlab='Congruence')
abline(v=rtc.result$observed.congruence,
col='red', lwd=2, lty=2)
}
visualize.rtc(tree1, tree2, rtc.result)
